pool:
  name: Digbyswift (Ionos)
  demands: java

variables:
  BuildConfiguration: 'Release'
  NugetPackages.Path: '$(Pipeline.Workspace)/.nuget/packages'

steps:
- powershell: |
   If(!(test-path -PathType container $(NugetPackages.Path)))
   {
         New-Item -ItemType directory -Path $(NugetPackages.Path)
   }
  displayName: 'Create NuGet cache directory'

- task: Cache@2
  displayName: 'Cache NuGet files'
  inputs:
    key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
    path: '$(NugetPackages.Path)'
    cacheHitVar: 'NUGET_CACHE_RESTORED'
    restoreKeys: |
     nuget | "$(Agent.OS)"
     nuget

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**\*.sln'
    restoreArguments: '--locked-mode'
    verbosityRestore: Detailed
    verbosityPack: Detailed
  condition: ne(variables.NUGET_CACHE_RESTORED, true)

- task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@3
  displayName: 'Prepare analysis on SonarQube Cloud'
  inputs:
    SonarQube: SonarCloud
    organization: 'digbyswift-oss'
    projectKey: 'digbyswift-oss_digbyswift-umbraco-seoeditor'
    projectName: 'Digbyswift.Umbraco.SeoEditor'
    projectVersion: '$(Build.BuildNumber)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '**\*.sln'
    arguments: '--packages $(NugetPackages.Path) --configuration $(BuildConfiguration) -property:SolutionDir="$(Build.SourcesDirectory)\src"'
    verbosityRestore: Detailed
    verbosityPack: Detailed

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**\*.Test.csproj'
    arguments: '--configuration $(BuildConfiguration) -property:SolutionDir="$(Build.SourcesDirectory)\src"'
    verbosityRestore: Detailed
    verbosityPack: Detailed

- task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@3
  displayName: 'Run Code Analysis'

- task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@3
  displayName: 'Publish Quality Gate Result'

- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
    command: pack
    verbosityRestore: Detailed
    nobuild: true
    includesymbols: true
    verbosityPack: Detailed

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: NuGetCommand@2
  displayName: 'NuGet push'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet'
